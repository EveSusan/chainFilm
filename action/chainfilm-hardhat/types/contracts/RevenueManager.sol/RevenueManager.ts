/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RevenueManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "distributeRevenue"
      | "getBalanceHandle"
      | "getUserAvailable"
      | "protocolId"
      | "registry"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Distributed" | "Withdrawn"): EventFragment;

  encodeFunctionData(
    functionFragment: "distributeRevenue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceHandle",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAvailable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "distributeRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DistributedEvent {
  export type InputTuple = [filmId: BigNumberish, amountWei: BigNumberish];
  export type OutputTuple = [filmId: bigint, amountWei: bigint];
  export interface OutputObject {
    filmId: bigint;
    amountWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    filmId: BigNumberish,
    user: AddressLike,
    amountWei: BigNumberish
  ];
  export type OutputTuple = [filmId: bigint, user: string, amountWei: bigint];
  export interface OutputObject {
    filmId: bigint;
    user: string;
    amountWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RevenueManager extends BaseContract {
  connect(runner?: ContractRunner | null): RevenueManager;
  waitForDeployment(): Promise<this>;

  interface: RevenueManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  distributeRevenue: TypedContractMethod<
    [filmId: BigNumberish, amountWei: BigNumberish],
    [void],
    "payable"
  >;

  getBalanceHandle: TypedContractMethod<
    [filmId: BigNumberish, user: AddressLike],
    [string],
    "view"
  >;

  getUserAvailable: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [filmId: BigNumberish, amountWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "distributeRevenue"
  ): TypedContractMethod<
    [filmId: BigNumberish, amountWei: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getBalanceHandle"
  ): TypedContractMethod<
    [filmId: BigNumberish, user: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAvailable"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [filmId: BigNumberish, amountWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Distributed"
  ): TypedContractEvent<
    DistributedEvent.InputTuple,
    DistributedEvent.OutputTuple,
    DistributedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Distributed(uint256,uint256)": TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;
    Distributed: TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;

    "Withdrawn(uint256,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
