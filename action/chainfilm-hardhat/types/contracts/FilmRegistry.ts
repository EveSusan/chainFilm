/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FilmRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "films"
      | "getSplit"
      | "nextFilmId"
      | "protocolId"
      | "registerFilm"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FilmRegistered"): EventFragment;

  encodeFunctionData(functionFragment: "films", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getSplit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextFilmId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerFilm",
    values: [
      string,
      string,
      BytesLike,
      BytesLike,
      AddressLike[],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "films", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSplit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextFilmId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFilm",
    data: BytesLike
  ): Result;
}

export namespace FilmRegisteredEvent {
  export type InputTuple = [filmId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [filmId: bigint, owner: string];
  export interface OutputObject {
    filmId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FilmRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): FilmRegistry;
  waitForDeployment(): Promise<this>;

  interface: FilmRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  films: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, boolean] & {
        owner: string;
        title: string;
        ipfsCidMeta: string;
        videoHashEnc: string;
        createdAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getSplit: TypedContractMethod<
    [filmId: BigNumberish],
    [
      [string[], bigint[], boolean] & {
        cols: string[];
        bps: bigint[];
        exists: boolean;
      }
    ],
    "view"
  >;

  nextFilmId: TypedContractMethod<[], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  registerFilm: TypedContractMethod<
    [
      title: string,
      ipfsCidMeta: string,
      videoHashHandle: BytesLike,
      proof: BytesLike,
      collaborators: AddressLike[],
      sharesBps: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "films"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, boolean] & {
        owner: string;
        title: string;
        ipfsCidMeta: string;
        videoHashEnc: string;
        createdAt: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSplit"
  ): TypedContractMethod<
    [filmId: BigNumberish],
    [
      [string[], bigint[], boolean] & {
        cols: string[];
        bps: bigint[];
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextFilmId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerFilm"
  ): TypedContractMethod<
    [
      title: string,
      ipfsCidMeta: string,
      videoHashHandle: BytesLike,
      proof: BytesLike,
      collaborators: AddressLike[],
      sharesBps: BigNumberish[]
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "FilmRegistered"
  ): TypedContractEvent<
    FilmRegisteredEvent.InputTuple,
    FilmRegisteredEvent.OutputTuple,
    FilmRegisteredEvent.OutputObject
  >;

  filters: {
    "FilmRegistered(uint256,address)": TypedContractEvent<
      FilmRegisteredEvent.InputTuple,
      FilmRegisteredEvent.OutputTuple,
      FilmRegisteredEvent.OutputObject
    >;
    FilmRegistered: TypedContractEvent<
      FilmRegisteredEvent.InputTuple,
      FilmRegisteredEvent.OutputTuple,
      FilmRegisteredEvent.OutputObject
    >;
  };
}
